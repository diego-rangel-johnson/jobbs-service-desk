-- üß™ TESTE DE CRIA√á√ÉO DE TICKETS - JOBBS SERVICE DESK
-- Execute este arquivo no Supabase Dashboard > SQL Editor para testar a cria√ß√£o de tickets

-- ========================================
-- 1. VERIFICAR PR√â-REQUISITOS
-- ========================================

SELECT '=== VERIFICANDO PR√â-REQUISITOS ===' as teste;

-- Verificar se h√° usu√°rios cadastrados
SELECT 
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ Usu√°rios encontrados: ' || COUNT(*)::text
    ELSE '‚ùå Nenhum usu√°rio encontrado!'
  END as status_usuarios
FROM auth.users;

-- Verificar se h√° perfis
SELECT 
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ Perfis encontrados: ' || COUNT(*)::text
    ELSE '‚ùå Nenhum perfil encontrado!'
  END as status_perfis
FROM public.profiles;

-- Verificar se h√° roles
SELECT 
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ Roles encontradas: ' || COUNT(*)::text
    ELSE '‚ùå Nenhuma role encontrada!'
  END as status_roles
FROM public.user_roles;

-- ========================================
-- 2. TESTE 1 - CRIA√á√ÉO B√ÅSICA DE TICKET
-- ========================================

SELECT '=== TESTE 1: CRIA√á√ÉO B√ÅSICA ===' as teste;

-- Criar um ticket b√°sico usando a fun√ß√£o personalizada
DO $$
DECLARE
  new_ticket_id UUID;
  user_id UUID;
BEGIN
  -- Obter um usu√°rio para teste
  SELECT id INTO user_id FROM auth.users LIMIT 1;
  
  IF user_id IS NOT NULL THEN
    -- Criar ticket usando a fun√ß√£o
    SELECT create_ticket(
      'Ticket de Teste B√°sico',
      'Este √© um teste de cria√ß√£o b√°sica de ticket usando a fun√ß√£o personalizada.',
      'medium',
      'TI',
      user_id
    ) INTO new_ticket_id;
    
    RAISE NOTICE '‚úÖ Ticket criado com ID: %', new_ticket_id;
  ELSE
    RAISE NOTICE '‚ùå Nenhum usu√°rio dispon√≠vel para teste';
  END IF;
END $$;

-- ========================================
-- 3. TESTE 2 - CRIA√á√ÉO DIRETA NA TABELA
-- ========================================

SELECT '=== TESTE 2: CRIA√á√ÉO DIRETA ===' as teste;

-- Inserir ticket diretamente na tabela
INSERT INTO public.tickets (
  subject,
  description,
  priority,
  department,
  customer_id,
  status
) 
SELECT 
  'Ticket de Teste Direto',
  'Este ticket foi criado diretamente na tabela para testar a inser√ß√£o manual.',
  'high'::ticket_priority,
  'Suporte',
  u.id,
  'open'::ticket_status
FROM auth.users u 
LIMIT 1;

-- ========================================
-- 4. TESTE 3 - M√öLTIPLOS TICKETS
-- ========================================

SELECT '=== TESTE 3: M√öLTIPLOS TICKETS ===' as teste;

-- Criar v√°rios tickets de uma vez
INSERT INTO public.tickets (
  subject,
  description,
  priority,
  department,
  customer_id,
  status
)
SELECT 
  'Ticket ' || i || ' - ' || 
  (ARRAY['Problema de Rede', 'Erro no Sistema', 'Solicita√ß√£o de Acesso', 'Backup Falhando', 'Atualiza√ß√£o Necess√°ria'])[i],
  'Descri√ß√£o detalhada do ticket n√∫mero ' || i || '. Este ticket foi criado automaticamente para teste.',
  (ARRAY['low', 'medium', 'high', 'urgent'])[((i-1) % 4) + 1]::ticket_priority,
  (ARRAY['TI', 'RH', 'Financeiro', 'Comercial'])[((i-1) % 4) + 1],
  u.id,
  (ARRAY['open', 'in_progress'])[((i-1) % 2) + 1]::ticket_status
FROM auth.users u, generate_series(1, 5) i
LIMIT 5;

-- ========================================
-- 5. TESTE 4 - TICKETS COM DATAS ESPEC√çFICAS
-- ========================================

SELECT '=== TESTE 4: TICKETS COM DATAS ===' as teste;

-- Criar ticket com data estimada
INSERT INTO public.tickets (
  subject,
  description,
  priority,
  department,
  customer_id,
  status,
  estimated_date
)
SELECT 
  'Ticket com Prazo Definido',
  'Este ticket possui uma data estimada de conclus√£o definida.',
  'urgent'::ticket_priority,
  'TI',
  u.id,
  'open'::ticket_status,
  CURRENT_DATE + INTERVAL '7 days'
FROM auth.users u 
LIMIT 1;

-- ========================================
-- 6. VERIFICAR RESULTADOS DOS TESTES
-- ========================================

SELECT '=== RESULTADOS DOS TESTES ===' as resultado;

-- Contar tickets criados
SELECT 
  'Total de tickets: ' || COUNT(*)::text as total_tickets
FROM public.tickets;

-- Mostrar tickets por status
SELECT 
  status,
  COUNT(*) as quantidade
FROM public.tickets
GROUP BY status
ORDER BY quantidade DESC;

-- Mostrar tickets por prioridade
SELECT 
  priority,
  COUNT(*) as quantidade
FROM public.tickets
GROUP BY priority
ORDER BY 
  CASE priority 
    WHEN 'urgent' THEN 1 
    WHEN 'high' THEN 2 
    WHEN 'medium' THEN 3 
    WHEN 'low' THEN 4 
  END;

-- Mostrar √∫ltimos 10 tickets criados
SELECT 
  ticket_number,
  subject,
  status,
  priority,
  department,
  TO_CHAR(created_at, 'DD/MM/YYYY HH24:MI') as criado_em
FROM public.tickets
ORDER BY created_at DESC
LIMIT 10;

-- ========================================
-- 7. TESTE DE COMENT√ÅRIOS AUTOM√ÅTICOS
-- ========================================

SELECT '=== TESTE: COMENT√ÅRIOS AUTOM√ÅTICOS ===' as teste;

-- Verificar se coment√°rios foram criados automaticamente pelo trigger
SELECT 
  'Coment√°rios autom√°ticos: ' || COUNT(*)::text as total_comentarios
FROM public.ticket_updates
WHERE message = 'Ticket criado';

-- ========================================
-- 8. TESTE DE NUMERA√á√ÉO AUTOM√ÅTICA
-- ========================================

SELECT '=== TESTE: NUMERA√á√ÉO AUTOM√ÅTICA ===' as teste;

-- Verificar se n√∫meros de tickets foram gerados corretamente
SELECT 
  ticket_number,
  subject
FROM public.tickets
WHERE ticket_number IS NOT NULL
ORDER BY ticket_number;

-- Verificar padr√£o de numera√ß√£o
SELECT 
  CASE 
    WHEN COUNT(*) = COUNT(CASE WHEN ticket_number ~ '^TK-[0-9]{3}$' THEN 1 END) 
    THEN '‚úÖ Todos os tickets seguem o padr√£o TK-XXX'
    ELSE '‚ùå Alguns tickets n√£o seguem o padr√£o correto'
  END as padrao_numeracao
FROM public.tickets
WHERE ticket_number IS NOT NULL;

-- ========================================
-- 9. TESTE DE PERFORMANCE
-- ========================================

SELECT '=== TESTE: PERFORMANCE ===' as teste;

-- Medir tempo de cria√ß√£o de ticket
\timing on

-- Criar 1 ticket para teste de performance
SELECT create_ticket(
  'Teste de Performance',
  'Este ticket foi criado para testar a performance da fun√ß√£o de cria√ß√£o.',
  'low',
  'TI'
);

\timing off

-- ========================================
-- 10. LIMPEZA DE TESTE (OPCIONAL)
-- ========================================

-- DESCOMENTE AS LINHAS ABAIXO SE QUISER LIMPAR OS DADOS DE TESTE

-- DELETE FROM public.ticket_updates WHERE ticket_id IN (
--   SELECT id FROM public.tickets WHERE subject LIKE '%Teste%'
-- );

-- DELETE FROM public.tickets WHERE subject LIKE '%Teste%';

-- ========================================
-- RESULTADO FINAL
-- ========================================

SELECT 'üéâ TESTES DE CRIA√á√ÉO CONCLU√çDOS! üéâ' as resultado_final;

-- Estat√≠sticas finais
SELECT 
  'Tickets totais: ' || (SELECT COUNT(*) FROM public.tickets)::text ||
  ' | Coment√°rios: ' || (SELECT COUNT(*) FROM public.ticket_updates)::text ||
  ' | Usu√°rios: ' || (SELECT COUNT(*) FROM auth.users)::text as estatisticas;

-- Verificar integridade dos dados
SELECT 
  CASE 
    WHEN NOT EXISTS (
      SELECT 1 FROM public.tickets t 
      LEFT JOIN auth.users u ON t.customer_id = u.id 
      WHERE u.id IS NULL
    ) 
    THEN '‚úÖ Todos os tickets t√™m clientes v√°lidos'
    ELSE '‚ùå Existem tickets com clientes inv√°lidos'
  END as integridade_clientes;

SELECT 
  CASE 
    WHEN NOT EXISTS (
      SELECT 1 FROM public.tickets 
      WHERE ticket_number IS NULL OR ticket_number = ''
    ) 
    THEN '‚úÖ Todos os tickets t√™m n√∫meros gerados'
    ELSE '‚ùå Existem tickets sem n√∫mero'
  END as integridade_numeracao;

-- ========================================
-- INSTRU√á√ïES DE USO
-- ========================================

SELECT 'üìã INSTRU√á√ïES DE USO' as instrucoes;
SELECT 'Para criar um novo ticket via fun√ß√£o:' as exemplo1;
SELECT 'SELECT create_ticket(''Assunto'', ''Descri√ß√£o'', ''medium'', ''TI'');' as exemplo2;
SELECT 'Para inserir diretamente na tabela, use a estrutura mostrada acima.' as exemplo3; 